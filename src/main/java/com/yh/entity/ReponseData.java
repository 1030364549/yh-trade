package com.yh.entity;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
/**
 * ************************************
 * 响应码辅助类<项目所有的响应码>
 * @param <T>
 * @param <PK>
 * ************************************
 */
@SuppressWarnings("all")
public class ReponseData implements Serializable{
	/**
	 * 
	 *********************************************************.<br>
	 * [方法] ajaxReq_ResCode <br>
	 * [描述] AJAX请求-响应码集合<br>
	 * [参数] TODO(对参数的描述) <br>
	 * [返回] String <br>
	 * [时间] 2017-12-07 下午19:19:19 <br>
	 * [作者] lvl
	 *********************************************************.<br>
	 */
	public static Map<String,String> ajaxReq_ResCode=new HashMap<String,String>(){
		{
			put("E0","成功");//成功
			put("E1","数据错误");//数据错误[未收到请求数据]
			put("E2","验证码错误");//验证码错误
			put("E3","账号或密码错误");//账号或密码错误
			put("E4","异常");//异常
		}
	};


	/**
	 *
	 *********************************************************.<br>
	 * [方法] ExcelNames <br>
	 * [描述] 调单Excel对应的列<br>
	 * [参数] TODO(对参数的描述) <br>
	 * [返回] String <br>
	 * [时间] 2017-12-07 下午19:19:19 <br>
	 * [作者] lvl
	 *********************************************************.<br>
	 */
	public static String[] OrderExcelNames=new String[]{
		//调单人,调单编号,卡号,交易日期,交易金额,应答码,首次查询时间,最终回复时间,工单号,交易时间,终端编码,备注
		"order_man","order_no","card_no","trad_date","trad_money","res_code","first_date","last_date","job_no","trad_time","zd_code","remark"
	};
	/**
	 *
	 *********************************************************.<br>
	 * [方法] OrderResCode <br>
	 * [描述] 调单应答码对应信息<br>
	 * [参数] TODO(对参数的描述) <br>
	 * [返回] String <br>
	 * [作者] lvl
	 *********************************************************.<br>
	 */
	public static Map<String,String> OrderResCode=new HashMap<String,String>(){
		{
			/*********查询原因码*********/
			put("6300","持卡人提出查询取现交易地址");
			put("6301","持卡人提出查询消费商户地址或名称");
			put("6302","持卡人（客户）提出查询原始交易是否成功");
			put("6307","查询互联网交易明细");
			put("6309","查核商户是否违规拓展商户");
			put("6340","发卡机构查询后仍有疑问，进行二次查询");

			/*********调单原因码*********/
			put("6303","持卡人对原始交易有疑问直接索取凭证");
			put("6304","持卡人查询完成后需要索取交易凭证");
			put("6305","查询地址或商户名称后未复而索取交易凭证");
			put("6308","交易有疑问索取证书（TC）及相关的计算数据");
			put("6343","司法需要索取交易凭证");
			put("6344","索取交易明细凭证");
			put("6345","涉嫌欺诈的交易需要索取凭证");

			/*********贷记调整*********/
			put("9600","交易被持卡人取消");
			put("9601","收单机构发现长款");
			put("9602","交易已清算，取现金额未提供");
			put("9603","ATM部分吐钞");

			/*********请款*********/
			put("9650","实际消费金额大于记账金额");
			put("9651","取现金额大于记账金额");
			put("9652","贷记调整或退款失误");

			/*********一次退单*********/
			put("4501","取现金额未提供或部分提供");
			put("4502","消费未成功，已扣账");
			put("4503","对请款（托收请款）交易有异议");
			put("4507","持卡人对交易金额有争议");
			put("4508","交易金额超过授权金额");
			put("4512","交易重复提交清算");
			put("4514","疑似欺诈的多笔交易");
			put("4515","持卡人否认交易-面对面交易");
			put("4522","交易未被批准");
			put("4526","收单机构提供资料不清晰");
			put("4527","收单机构查复超过时限或回复码是04（交易凭证无法提供）");
			put("4528","已取消的预授权交易");
			put("4532","退货（贷记调整）交易资金未提交清算");
			put("4536","逾期提交清算");
			put("4544","已撤销的交易");
			put("4557","已扣账，但客户未收到商户承诺的服务或订购的商品");
			put("4558","交易证书（TC）验证失败");
			put("4559","不能提供交易证书（TC）及相关计算数据");
			put("4562","伪卡欺诈");
			put("4752","余额查询未成功，索还手续费");
			put("4802","风险交易");
			put("4803","风险商户");
			put("4806","以其他方式支付");
			put("4810","持卡人否认交易-非面对面交易");

			/*********再请款*********/
			put("2000","已退货或已做贷记调整");
			put("2001","退单交易的受理机构流水号不正确");
			put("2002","支持退单的文件未收到");
			put("2003","正确的交易日期");
			put("2005","正确的商户地址");
			put("2008","交易得到发卡机构授权");
			put("2702","无效的一次退单");
			put("2704","提供清晰的交易凭证");
			put("2706","收单机构能提供有效凭证证明原交易无误");
			put("2707","支持退单的文件不清晰");

			/*********二次退单*********/
			put("4526","再请款支持文档未收到或要素不完整、不清晰");
			put("4570","再请款不正确");
			put("4571","发卡机构能够提供一次退单中缺少的证明材料");
			put("4572","发卡机构纠正一次退单原因");

			/*********例外交易*********/
			put("9700","收单机构借记卡贷记调整失误");
			put("9701","对发卡机构借记卡一次退单有疑义");
			put("9702","收单机构原始交易短款");
			put("9703","超过差错交易的提交时限");
			put("9704","差错处理流程已经结束但仍未解决");
			put("9705","中心无记录的交易");
			put("9706","其他经协商同意付款的交易");
			put("9710","争议协商备案");
		}
	};



}
